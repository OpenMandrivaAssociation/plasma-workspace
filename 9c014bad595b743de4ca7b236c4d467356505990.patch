From 9c014bad595b743de4ca7b236c4d467356505990 Mon Sep 17 00:00:00 2001
From: Fushan Wen <qydwhotmail@gmail.com>
Date: Sun, 16 Mar 2025 22:40:01 +0800
Subject: [PATCH] klipper: let Qt handle plain text to deal with non-UTF-8
 encodings

Data from text/plain might use a weird encoding on some systems, so
don't manually deal with plain text from raw bytes.

BUG: 500203
FIXED-IN: 6.3.4
---
 klipper/autotests/v3migrationtest.py |  8 +--
 klipper/updateclipboardjob.cpp       | 77 +++++++++++++++-------------
 klipper/updateclipboardjob.h         |  3 +-
 3 files changed, 47 insertions(+), 41 deletions(-)

diff --git a/klipper/autotests/v3migrationtest.py b/klipper/autotests/v3migrationtest.py
index 1df43a4f77..c295031cbd 100755
--- a/klipper/autotests/v3migrationtest.py
+++ b/klipper/autotests/v3migrationtest.py
@@ -63,19 +63,19 @@ class V3MigrationTest(unittest.TestCase):
             res = res_cur.fetchone()
             self.assertEqual(res[0], "230aa750d982a8e1a7e8f0b7ccc4e4b1b87bf593")
             self.assertGreaterEqual(res[1], self.time_now)
-            self.assertEqual(res[2], "text/plain")
+            self.assertEqual(res[2], "text/plain,text/plain;charset=utf-8")
             self.assertEqual(res[3], "Fushan Wen")
 
             # main
             res = res_cur.fetchone()
             self.assertEqual(res[0], "e2ab8561c5a8f9967e62486c44211c63bcf7d002")
             self.assertGreaterEqual(res[1], self.time_now - 1)
-            self.assertEqual(res[2], "text/plain")
+            self.assertEqual(res[2], "text/plain,text/plain;charset=utf-8")
             self.assertEqual(res[3], "clipboard")
 
             # aux
-            self.assertEqual(1, len(cur.execute("SELECT uuid,mimetype,data_uuid FROM aux WHERE uuid='230aa750d982a8e1a7e8f0b7ccc4e4b1b87bf593' AND mimetype='text/plain' AND data_uuid='230aa750d982a8e1a7e8f0b7ccc4e4b1b87bf593'").fetchall()))
-            self.assertEqual(1, len(cur.execute("SELECT uuid,mimetype,data_uuid FROM aux WHERE uuid='e2ab8561c5a8f9967e62486c44211c63bcf7d002' AND mimetype='text/plain' AND data_uuid='e2ab8561c5a8f9967e62486c44211c63bcf7d002'").fetchall()))
+            self.assertEqual(1, len(cur.execute("SELECT uuid,mimetype,data_uuid FROM aux WHERE uuid='230aa750d982a8e1a7e8f0b7ccc4e4b1b87bf593' AND mimetype='text/plain;charset=utf-8' AND data_uuid='230aa750d982a8e1a7e8f0b7ccc4e4b1b87bf593'").fetchall()))
+            self.assertEqual(1, len(cur.execute("SELECT uuid,mimetype,data_uuid FROM aux WHERE uuid='e2ab8561c5a8f9967e62486c44211c63bcf7d002' AND mimetype='text/plain;charset=utf-8' AND data_uuid='e2ab8561c5a8f9967e62486c44211c63bcf7d002'").fetchall()))
 
     def test_convert_v2_to_v3_image(self) -> None:
         with tempfile.TemporaryDirectory() as temp_dir:
diff --git a/klipper/updateclipboardjob.cpp b/klipper/updateclipboardjob.cpp
index 2864d60e19..9917882129 100644
--- a/klipper/updateclipboardjob.cpp
+++ b/klipper/updateclipboardjob.cpp
@@ -39,49 +39,54 @@ UpdateDatabaseJob *UpdateDatabaseJob::updateClipboard(QObject *parent,
                                                       qreal timestamp)
 {
     QCryptographicHash hash(QCryptographicHash::Sha1);
-    bool hasImage = false;
     std::list<MimeData> mimeDataList;
     const QStringList formats = mimeData->formats();
+
+    if (mimeData->hasText()) {
+        QByteArray data = mimeData->text().toUtf8();
+        hash.addData(data);
+        mimeDataList.emplace_back(s_plainTextPrefix, std::move(data), QString::fromLatin1(hash.result().toHex()));
+        mimeDataList.emplace_back(s_plainUtf8Text, QByteArray() /*Same uuid*/, QString::fromLatin1(hash.result().toHex()));
+    }
+
+    if (mimeData->hasImage()) {
+        QImage image = mimeData->imageData().value<QImage>();
+        hash.reset();
+        hash.addData(QByteArrayView(reinterpret_cast<const char *>(image.constBits()), image.sizeInBytes()));
+        QByteArray data;
+        QBuffer buffer(&data);
+        QImageWriter encoder(&buffer, "PNG");
+        encoder.write(image);
+        mimeDataList.emplace_back(s_imageFormat, std::move(data), QString::fromLatin1(hash.result().toHex()));
+    }
+
     for (const QString &format : formats) {
         if (!format.contains(u'/')) {
             continue;
         }
-        QByteArray data;
-        if (format.startsWith(u"image/") || format == u"application/x-qt-image") {
-            if (!hasImage) {
-                hasImage = true;
-                QImage image = mimeData->imageData().value<QImage>();
-                hash.reset();
-                hash.addData(QByteArrayView(reinterpret_cast<const char *>(image.constBits()), image.sizeInBytes()));
-                QBuffer buffer(&data);
-                QImageWriter encoder(&buffer, "PNG");
-                encoder.write(image);
-                mimeDataList.emplace_back(s_imageFormat, std::move(data), QString::fromLatin1(hash.result().toHex()));
-            }
-        } else {
-            if (format.startsWith(s_plainTextPrefix)) {
-                const QStringView encoding = QStringView(format).sliced(s_plainTextPrefix.size());
-                if (encoding.compare(u"utf-8", Qt::CaseInsensitive)) {
-                    // Qt clipboard doesn't support other encodings.
-                    continue;
-                }
-            } else if (std::none_of(s_acceptableTextFormatPrefixes.begin(), s_acceptableTextFormatPrefixes.end(), [&format](QStringView prefix) {
-                           return format.startsWith(prefix);
-                       })) {
-                // Don't create un-asked for DDE links in LibreOffice apps;
-                // we don't want them.
-                continue;
-            }
-            data = mimeData->data(format);
-            if (data.size() > 20 * 1000 * 1000) {
-                // Skip anything greater than 20MB because we don't want too
-                // many heavy things to be persistently held in the clipboard.
-                continue;
-            }
-            hash.reset();
-            hash.addData(data);
-            mimeDataList.emplace_back(format, std::move(data), QString::fromLatin1(hash.result().toHex()));
+
+        if (format.startsWith(s_plainTextPrefix) || format.startsWith(u"image/") || format == u"application/x-qt-image") {
+            continue; // Already saved
+        }
+
+        if (std::none_of(s_acceptableTextFormatPrefixes.begin(), s_acceptableTextFormatPrefixes.end(), [&format](QStringView prefix) {
+                return format.startsWith(prefix);
+            })) {
+            // Don't create un-asked for DDE links in LibreOffice apps;
+            // we don't want them.
+            continue;
         }
+
+        QByteArray data = mimeData->data(format);
+        if (data.size() > 20 * 1000 * 1000) {
+            // Skip anything greater than 20MB because we don't want too
+            // many heavy things to be persistently held in the clipboard.
+            continue;
+        }
+
+        hash.reset();
+        hash.addData(data);
+        mimeDataList.emplace_back(format, std::move(data), QString::fromLatin1(hash.result().toHex()));
     }
 
     return new UpdateDatabaseJob(parent, database, databaseFolder, uuid, text, std::move(mimeDataList), timestamp);
diff --git a/klipper/updateclipboardjob.h b/klipper/updateclipboardjob.h
index 873987cfdd..d02ed62598 100644
--- a/klipper/updateclipboardjob.h
+++ b/klipper/updateclipboardjob.h
@@ -12,7 +12,8 @@ class QMimeData;
 class QSqlDatabase;
 
 inline constexpr QLatin1String s_imageFormat("image/png");
-inline constexpr QLatin1String s_plainTextPrefix("text/plain;charset=");
+inline constexpr QLatin1String s_plainTextPrefix("text/plain");
+inline constexpr QLatin1String s_plainUtf8Text("text/plain;charset=utf-8");
 
 struct MimeData {
     QString type;
-- 
GitLab

